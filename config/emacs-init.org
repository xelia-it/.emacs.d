
#+AUTHOR: Alessandro Passerini
#+TITLE: Emacs Configuration

* Package Management
** Setup repositories and use-package

Setup repository.
If you want to use only *stable* packages uncomment *melpa-stable* repository below.
Beware that some packages may not exists or not work as expected.

#+BEGIN_SRC emacs-lisp :tangle yes
  (defvar repo-gnu '("gnu" . "https://elpa.gnu.org/packages/"))
  (defvar repo-melpa '("melpa" . "https://melpa.org/packages/"))
  ;; (defvar repo-melpa-stable '("melpa-stable" . "https://stable.melpa.org/packages/"))
  (defvar repo-org-elpa '("org" . "http://orgmode.org/elpa/"))

  (setq package-archives nil)
  (add-to-list 'package-archives repo-gnu t)
  (add-to-list 'package-archives repo-melpa t)
  ;; (add-to-list 'package-archives repo-melpa-stable t)
  (add-to-list 'package-archives repo-org-elpa t)
#+END_SRC

** Install use-package

Now we can tell Emacs to install use-package if it's not present.

#+BEGIN_SRC emacs-lisp :tangle yes
  (require 'package)

  ;; Install use-package package if not present
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (eval-when-compile
    (require 'use-package))
#+END_SRC

** Native compilation

I strongly suggest to enabel Native Compilation whenever possible.

#+BEGIN_SRC emacs-lisp :tangle yes
  (setq native-comp-deferred-compilation t)
  (setq package-native-compile t)
  (setq comp-async-report-warnings-errors nil)
#+END_SRC

** Path for executable files

The environment variables in Emacs looks the same as in user's shell.

#+BEGIN_SRC emacs-lisp :tangle yes
  ;; (Works only on Linux/Mac)
  (use-package exec-path-from-shell
    :if (memq window-system '(mac ns x))
    :ensure t
    :config
    (setq exec-path-from-shell-check-startup-files nil)
      (exec-path-from-shell-initialize)
    )
#+END_SRC

** Separate customization file

The customize command let's Emacs to configure each aspects of the editor.
In order to keep clean configuration all customizations are written
in a separate file.

#+BEGIN_SRC emacs-lisp :tangle yes
;; Use a separate custom file
(setq custom-file "~/.emacs.d/custom.el")
(cond
 ((file-exists-p custom-file) (load custom-file t t))
 )
#+END_SRC

* Save Buffers
** Customize saving buffers

Save buffers needs to be performed without confirmation.
Also we want to refresh magit buffers automatically.

#+BEGIN_SRC emacs-lisp :tangle yes
(defun my-save()
  "Save current buffer without confirmation."
  (interactive)

  (save-buffer t)
  (if (fboundp 'magit-refresh-all)
    (magit-refresh-all))
  )
#+END_SRC

Also we want a keystroke to save all buffers.
Both these setup will be performed later.

#+BEGIN_SRC emacs-lisp :tangle yes
(defun my-save-all()
  "Save all buffers without confirmation and refresh magit."
  (interactive)

  (save-some-buffers t)
  (if (fboundp 'magit-refresh-all)
    (magit-refresh-all))
  )
#+END_SRC

** Backup preferences

#+BEGIN_SRC emacs-lisp :tangle yes
  (defun my-backup-preferences()
    "Apply my backup preference."

    ;; Temporary .#files interferes with Angular
    (setq create-lockfiles nil)

    ;; Backup files copying them into a subdirectory
    (setq backup-directory-alist `(("." . "~/.saves")))

    (setq make-backup-files t               ; backup of a file the first time it is saved.
          backup-by-copying t               ; don't clobber symlinks
          version-control t                 ; version numbers for backup files
          delete-old-versions t             ; delete excess backup files silently
          delete-by-moving-to-trash t
          kept-old-versions 6               ; oldest versions to keep when a new numbered backup is made (default: 2)
          kept-new-versions 9               ; newest versions to keep when a new numbered backup is made (default: 2)
          auto-save-default t               ; auto-save every buffer that visits a file
          auto-save-timeout 20              ; number of seconds idle time before auto-save (default: 30)
          auto-save-interval 200            ; number of keystrokes between auto-saves (default: 300)
          )

    ;; Save without messages
    (setq-default save-silently t)

    ;; Delete trailing whitespaces before saving
    (add-hook 'before-save-hook 'delete-trailing-whitespace)

    ;; No more typing the whole yes or no. Just y or n will do.
    (fset 'yes-or-no-p 'y-or-n-p)
    )
#+END_SRC

* Editing
** Colors

Define here all colors to be applyed to the user interface. Currently only defines a very light color compatible with atom-one-dark-theme.

#+BEGIN_SRC emacs-lisp :tangle yes
  (defvar near-to-white-color "#86e6f2")
#+END_SRC

** Indent preferences (generic)

First we define a set of default values to be used in every buffer.
I prefer to avoid tabs for indentation.

#+BEGIN_SRC emacs-lisp :tangle yes
  (defun my-indent-preferences()
    "Setup default indentations."
    (interactive)

    ;; Do not use tabs by default
    (setq-default indent-tabs-mode nil)

    ;; Use 4 spaces by default
    (setq-default tab-width 4)
    (setq-default ruby-indent-level 2)
    (setq-default css-indent-offset 4)
    )
#+END_SRC

** Indent preferences (per-project)

Add support for EditorConfig files.
These files apply indentations and editor preferences for each file (per project).
For more information please read: https://editorconfig.org/

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package editorconfig
    :ensure t
    :config
    (editorconfig-mode 1)
    )
#+END_SRC

** Indent Guide

Show indent guides.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package highlight-indent-guides
    :ensure t
    :defer t
    :config
    ;;(setq-default highlight-indent-guides-method 'character)
    (setq-default highlight-indent-guides-method 'bitmap)
    ;;(setq-default highlight-indent-guides-character ?\|)
    (set-face-attribute 'highlight-indent-guides-character-face
			(face-attribute 'font-lock-comment-face :foreground))

    ;; Activate indent guides for all programming languages
    :hook (prog-mode . highlight-indent-guides-mode)
    )
#+END_SRC

** Cut-Paste like Windows

Setup Cut-Paste like most Windows and MAC editors.

#+BEGIN_SRC emacs-lisp :tangle yes
(defun my-cut-paste-preferences()
  "Setup cut/paste preferences."
  (interactive)

  ;; Cut-Paste like Windows
  (cua-mode t)

  ;; Disable selection after copy.
  ;; Standard Windows behaviour is to keep region instead.
  (setq cua-keep-region-after-copy nil)

  ;; Typed text deletes selected text
  (delete-selection-mode t)

  ;; No region when it is not highlighted
  (transient-mark-mode 1)
  )
#+END_SRC

** Search and Replace

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package visual-regexp
    :ensure t
    :defer t
    :init
    (setq vr/auto-show-help t)

    :config
    (set-face-attribute 'vr/match-0 nil
       :foreground near-to-white-color
       :background nil
       :weight 'extra-bold
       :box '(:line-width (-1 . -1)
              :color "near-to-white"
              :style nil)
      )
    (set-face-attribute 'vr/match-1 nil
      :foreground near-to-white-color
      :background nil
      :weight 'extra-bold
      :box '(:line-width (-1 . -1)
             :color "near-to-white"
             :style nil)
      )
    :bind (
           ("S-C-r" . vr/mc-mark)
           ("C-r" . vr/replace)
           )
    )
#+END_SRC

** Search preferences

#+BEGIN_SRC emacs-lisp :tangle yes
  (defun my-search-preferences()
    "Configure search & replace."
    (interactive)

    (set-face-attribute 'isearch nil
      :foreground nil
      :background nil
      :weight 'extra-bold
      :box '(:line-width (-1 . -1)
             :color "near-to-white"
             :style nil)
      )
    )
#+END_SRC

** Word wrap

#+BEGIN_SRC emacs-lisp :tangle yes
  (defun my-word-wrap()
    "Manage word wrap"
    (interactive)

    (setq-default truncate-lines t)
    )
#+END_SRC

** Move line

Almost all IDE has keystrokes to move and duplicate lines. The package move-dup implements the same feature in Emacs.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package move-dup
     :ensure t
     :defer t
     :config

     (global-move-dup-mode)

     :bind (
            ("M-<up>" . md-move-lines-up)
            ("M-<down>" . md-move-lines-down)
            ("M-C-<up>" . md-duplicate-up)
            ("M-C-<down>" . md-duplicate-down)
            )
     )
#+END_SRC

** Multiple Cursors

Add the ability to manage multiple cursors.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package multiple-cursors
    :ensure t
    :config

    ;; Needed to configure this package
  (require 'multiple-cursors)

  ;; Always run commands
  (setq-default mc/always-run-for-all t)
  ;; Always run commands
  (setq-default mc/always-repeat-command t)
  ;; Safety ceil
  (setq-default mc/max-cursors 30)

  (set-face-attribute 'mc/cursor-bar-face nil :background "white" :height 1)

  ;; NO NOT USE :bind here
  ;; It doesn't seems working well with multiple cursor

  ;; Exit using escape
  (define-key mc/keymap (kbd "<escape>") 'mc/keyboard-quit)

  ;; will make <return> insert a newline; multiple-cursors-mode can still
  ;; be disabled with C-g / ESC
  (define-key mc/keymap (kbd "<return>") nil)

  ;; Basic selection
  (global-set-key (kbd "C-S-D") 'mc/mark-previous-like-this-word)
  (global-set-key (kbd "C-D") 'mc/mark-next-like-this-word)
  (global-set-key (kbd "M-S-<up>") 'mc/mark-previous-lines)
  (global-set-key (kbd "M-S-<down>") 'mc/mark-next-lines)
  )
#+END_SRC

** Compile Preferences

#+BEGIN_SRC emacs-lisp :tangle yes
  (defun my-compiling-preferences()
    "Configure compiler."
    (interactive)

    ;; Auto-save before compiling
    (setq compilation-ask-about-save nil)

    ;; Never prompt to kill a compilation session.
    (setq-default compilation-always-kill t)

    ;; Always scroll to the bottom.
    (setq-default compilation-scroll-output t)

    ;; Show ANSI color
    (add-hook 'compilation-filter-hook 'ansi-color-compilation-filter)
    )
#+END_SRC

* User Interface

All customization are defined inside functions.
We'll activate everything when loading theme.

** Remove unwanted buffers

Remove all unwanted buffers and limit the amounte of messages shown.
Also show an empty scratch when starting.

#+BEGIN_SRC emacs-lisp :tangle yes
  (defun my-manage-buffers()
    "Remove unwanted buffers."
    (interactive)

    ;; Empty scratch buffer
    (setq initial-scratch-message nil)

    ;; Scratch buffer without any stuff (simple text)
    (setq initial-major-mode 'text-mode)

    ;; Empty minibuffer message
    (defun display-startup-echo-area-message()
      "Overwrite default startup message."
      (message ""))

    ;; Increase error level in *Warnings* buffer
    ;; (default is :warning). Removes many unwanted warnings.
    (setq warning-minimum-level :error)

    ;; Removes *Completions* from buffer after you've opened a file.
    (add-hook 'minibuffer-exit-hook
              '(lambda ()
                 (let ((buffer "*Completions*"))
                   (and (get-buffer buffer)
                        (kill-buffer buffer)))))
    )
#+END_SRC

** Icons

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package all-the-icons
    :ensure t)
  (use-package all-the-icons-completion
    :ensure t)
  (use-package all-the-icons-dired
    :ensure t)
#+END_SRC

** Fonts

#+BEGIN_SRC emacs-lisp :tangle yes
  (defun my-set-default-font()
    "Set default font"
    (set-face-attribute 'default nil :family "DejaVu Sans Mono" :slant 'normal :weight 'normal :height 113)
    )
#+END_SRC

** Kill buffers

Utility for killing buffers other than current buffer.

#+BEGIN_SRC emacs-lisp :tangle yes
(defun my-kill-other-buffers ()
    "Kill all other buffers."
    (interactive)

    (mapc 'kill-buffer
          (delq (current-buffer)
                (remove-if-not 'buffer-file-name (buffer-list))))
    (message "Killed other buffers")
    )
#+END_SRC

** Cursor style

Set default cursor style.

#+BEGIN_SRC emacs-lisp :tangle yes
  (defun my-setup-cursor()
    "My setup cursor."
    (interactive)

    ;; Cursor like a bar
    (setq-default cursor-type '(bar . 3))
    ;; Set cursor color
    (set-cursor-color "white")
    ;; Blink cursor
    (blink-cursor-mode)
    )
#+END_SRC

** Line numbers

Line numbers are useful in programming mode.
Define the function now. Loading theme triggers this function.

#+BEGIN_SRC emacs-lisp :tangle yes
  (defun my-show-line-numbers()
    "Setup line numbers."
    (interactive)

    (setq display-line-numbers-width 5)
    (add-hook 'prog-mode-hook 'display-line-numbers-mode)
    (set-face-foreground 'line-number (face-foreground 'font-lock-comment-face))
    (set-face-foreground 'line-number-current-line (face-foreground 'font-lock-builtin-face))
    )
#+END_SRC

** Show parentesis match

#+BEGIN_SRC emacs-lisp :tangle yes
  (defun my-show-parens()
    "Apply style to parenthesis match."
    (interactive)

    (set-face-attribute 'show-paren-match nil
                        :foreground nil
                        :background nil
                        :weight 'extra-bold
                        :box '(:line-width (-1 . -1)
                               :color "near-to-white"
                               :style nil)
                        )
    )
#+END_SRC

** Theme (and activate stuffs)

The main theme is inspired to Visual Studio Code.
Solaire helps enhance the current buffer.
It should be run before the theme.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package solaire-mode
    :ensure t
    :config
    (solaire-global-mode +1))
#+END_SRC

Now load the main theme.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package doom-themes
    :ensure t
    :init

    ;; In early stage customize all non-UI stuffs
    (my-backup-preferences)
    (my-manage-buffers)
    (my-indent-preferences)
    (my-cut-paste-preferences)
    (my-word-wrap)
    (my-compiling-preferences)

    :config

    ;; Load default theme
    ;; (load-theme 'doom-spacegrey t)
    (load-theme 'doom-dark+ t)

    ;; Customize UI stuffs after loading theme
    (my-set-default-font)
    (my-setup-cursor)
    (my-show-line-numbers)
    (my-show-parens)
    (my-search-preferences)

    ;; Show current line
    (global-hl-line-mode)

    ;; Toggle full screen automatically
    (add-hook 'window-setup-hook 'toggle-frame-maximized t)

    :bind (
           ("C-<f4>" . 'kill-buffer-and-window)
           ("C-w" . 'kill-buffer-and-window)
           ("S-C-<f4>" . 'my-kill-other-buffers)
           ("S-C-w" . 'my-kill-other-buffers)
           ("<escape>" . 'keyboard-quit)
           )
    )
#+END_SRC

Setup also a fancy modeline.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package doom-modeline
    :ensure t
    :init
    ;; The maximum displayed length of the branch name of version control.
    (setq doom-modeline-vcs-max-length 25)
    (doom-modeline-mode 1)
    )
#+END_SRC

Add project tree.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package treemacs
    :ensure t
    :defer t
    :config

    (progn
      (setq treemacs-collapse-dirs                   (if treemacs-python-executable 3 0)
            treemacs-deferred-git-apply-delay        0.5
            treemacs-directory-name-transformer      #'identity
            treemacs-display-in-side-window          t
            treemacs-eldoc-display                   'simple
            treemacs-file-event-delay                2000
            treemacs-file-extension-regex            treemacs-last-period-regex-value
            treemacs-file-follow-delay               0.2
            treemacs-file-name-transformer           #'identity
            treemacs-follow-after-init               t
            treemacs-expand-after-init               t
            treemacs-find-workspace-method           'find-for-file-or-pick-first
            treemacs-git-command-pipe                ""
            treemacs-goto-tag-strategy               'refetch-index
            treemacs-header-scroll-indicators        '(nil . "^^^^^^")
            treemacs-hide-dot-git-directory          t
            treemacs-indentation                     2
            treemacs-indentation-string              " "
            treemacs-is-never-other-window           nil
            treemacs-max-git-entries                 5000
            treemacs-missing-project-action          'ask
            treemacs-move-forward-on-expand          nil
            treemacs-no-png-images                   nil
            treemacs-no-delete-other-windows         t
            treemacs-project-follow-cleanup          nil
            treemacs-persist-file                    (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
            treemacs-position                        'left
            treemacs-read-string-input               'from-child-frame
            treemacs-recenter-distance               0.1
            treemacs-recenter-after-file-follow      nil
            treemacs-recenter-after-tag-follow       nil
            treemacs-recenter-after-project-jump     'always
            treemacs-recenter-after-project-expand   'on-distance
            treemacs-litter-directories              '("/node_modules" "/.venv" "/.cask")
            treemacs-project-follow-into-home        nil
            treemacs-show-cursor                     nil
            treemacs-show-hidden-files               t
            treemacs-silent-filewatch                nil
            treemacs-silent-refresh                  nil
            treemacs-sorting                         'alphabetic-asc
            treemacs-select-when-already-in-treemacs 'move-back
            treemacs-space-between-root-nodes        t
            treemacs-tag-follow-cleanup              t
            treemacs-tag-follow-delay                1.5
            treemacs-text-scale                      nil
            treemacs-user-mode-line-format           nil
            treemacs-user-header-line-format         nil
            treemacs-wide-toggle-width               70
            treemacs-width                           45
            treemacs-width-increment                 1
            treemacs-width-is-initially-locked       t
            treemacs-workspace-switch-cleanup        nil)
      )

      :bind (
             ("C-\\" . 'treemacs)
             )
      )
#+END_SRC

** Key Help Screen

Show help for keybindings.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package which-key
    :ensure t
    :init
    (which-key-setup-side-window-right)
    (which-key-mode)
    )
#+END_SRC

** Windows position

Force window positioning for a specified function.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package shackle
    :ensure t
    :config
    (setq shackle-rules '(
                          ("\\`\\*[hH]elm.*?\\*\\'" :regexp t :align 'below :size 0.3)
                          ("\\`\\*bm-bookmarks.*?\\*\\'" :regexp t :align 'below :size 0.2)
                          ("\\`\\*Flymake.*?\\*\\'" :regexp t :align 'below :size 0.2)
                          ("\\`\\*Flycheck.*?\\*\\'" :regexp t :align 'below :size 0.2)
                          ))
    (shackle-mode 1)
    )
#+END_SRC

* Completion
** Install Helm

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package helm
    :ensure t
    :defer t
    :config

    (setq helm-display-function 'pop-to-buffer)
    (setq helm-display-header-line nil)

    ;; Colors
    ;; Set "match" color for searches.
    (set-face-attribute 'helm-match nil
                        :foreground near-to-white-color :background nil :weight 'extra-bold)

    :bind (
           ("M-x" . helm-M-x)
           ("C-o" . helm-find-files)
           ("C-j" . helm-imenu)
           ;; Various common ways to switch buffers
           ("C-x b" . helm-buffers-list)
           ("C-<tab>" . helm-buffers-list)
           ("C-<iso-lefttab>" . helm-buffers-list)
           ("C-x C-b" . helm-buffers-list)
           ;; The kill ring is handy
           ("S-C-v" . helm-show-kill-ring)
           ("C-f" . helm-occur)
           :map helm-map
           ;; Use tab to narrow selection
           ("<tab>" . helm-execute-persistent-action)
           ("C-<tab>" . helm-next-line)
           ("C-<iso-lefttab>" . helm-previous-line)
           )
    )
#+END_SRC

* Projects Management
** Project list

Projectile package helps discover and remember projects.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package projectile
    :ensure t
    :defer t
    :init

    (setq projectile-completion-system 'helm)

    (put 'projectile-project-configure-cmd 'safe-local-variable #'stringp)
    (put 'projectile-project-compilation-cmd 'safe-local-variable #'stringp)
    (put 'projectile-project-run-cmd 'safe-local-variable #'stringp)
    (put 'projectile-project-test-cmd 'safe-local-variable #'stringp)

    (projectile-mode)

    :bind (
           ;; Compile Project
           ("<f9>" . projectile-compile-project)
           ("C-<f9>" . projectile-run-project)
           ("S-<f9>" . projectile-configure-project)
           ("M-<f9>" . projectile-test-project)
           )
       )
#+END_SRC

We want to use helm for selecting and narrowing projects.

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package helm-projectile
  :ensure t
  :defer t
  :bind (
         ("C-M-f" . helm-projectile-grep)
         ("S-C-o" . helm-projectile-switch-project)
         ("C-t" . helm-projectile-find-file)
         )
  :config
  (helm-projectile-on)
  )
#+END_SRC

Let projectile integrate with Treemacs.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package treemacs-projectile
    :ensure t
    :defer t
    )
#+END_SRC

** Git support

Magit is a complete User Interface for Git.

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package magit
  :ensure t
  :defer t
  :bind (
         ("<f5>" . magit-status)
         ("<f6>" . magit-log-all)
         :map magit-mode-map
         ("<escape>" . magit-mode-bury-buffer)
	     )
  ;;:hook (prog-mode . magit-mode)
  )
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package git-gutter
  :ensure t
  :defer t
  :config
  (custom-set-variables
	'(git-gutter:modified-sign "❚")
	'(git-gutter:added-sign "❚")
	'(git-gutter:deleted-sign "❚"))

  (custom-set-variables
	'(git-gutter:update-interval 2))

  :hook (prog-mode . git-gutter-mode)

  ;; If you want to activate git-gutter globally
  ;; (global-git-gutter-mode t)

  :bind (
         ("<f7>" . git-gutter:previous-hunk)
         ("C-<f7>" . git-gutter:popup-hunk)
         ("S-C-<f7>" . git-gutter:revert-hunk)
         ("<f8>" . git-gutter:next-hunk)
         ("C-<f8>" . git-gutter:popup-hunk)
         ("S-C-<f8>" . git-gutter:revert-hunk)
         )
  )
#+END_SRC

* Language Support
** LSP

Language Service Protocol allows any editor to acquire IDE-like features
like code completion, find implementation, find references, and so on.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package lsp-mode
    :ensure t
    :defer t
    :commands lsp
    :init

    ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
    (setq lsp-keymap-prefix "C-l")

    :config

    (setq lsp-prefer-flymake t)
    ;;  (setq lsp-ui-doc-use-webkit t)
    (setq lsp-enable-file-watchers t)
    ;; Set warning only if the file to watch are bigger than 100000
    (setq lsp-file-watch-threshold 100000)
    ;; Read process output up to 5 MByte
    (setq read-process-output-max 5242880)
    (setq gc-cons-threshold 100000000)
    (setq lsp-idle-delay 0.250)
    ;; If set to true can cause a performance hit
    ;; Enable it only for debugging
    (setq lsp-log-io nil)
    ;; Don't watch the file in the workspace
    (setq lsp-enable-file-watchers nil)
    ;; Disable automatic server installation suggestions.
    (setq lsp-enable-suggest-server-download nil)

    :bind (
           ("C-SPC" . completion-at-point)
           )

    :hook (
           ;; Integrate with which-key
           (lsp-mode . lsp-enable-which-key-integration)
           ;; Enable languages
           (c++-mode . lsp)
           (ruby-mode . lsp)
           (python-mode . lsp)
           (web-mode . lsp)
           (typescript-mode . lsp)
           (rust-mode . lsp)
           (json-mode . lsp)
           (sh-mode . lsp)
           (dockerfile-mode . lsp)
           )
    )
#+END_SRC

Add lsp-ui package for better user interface.

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package lsp-ui
  :ensure t
  :defer t
  :after (lsp-mode)
  :commands lsp-ui-mode
  :config
    (setq lsp-ui-doc-use-webkit t)

  :hook (lsp-mode . lsp-ui-mode)
  )
#+END_SRC

Use a fancy box for completion selection.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package company-box
    :ensure t
    :defer t
    :config
      (setq company-box-enable-icon t)
    :hook (company-mode . company-box-mode)
    )
#+END_SRC

Integrate with treemacs package.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package lsp-treemacs
    :ensure t
    :defer t
    :after (treemacs lsp)
    :commands lsp-treemacs-errors-list
    :bind (
           ("<f12>" . lsp-treemacs-errors-list)
           )
   )
#+END_SRC

** Language: Angular

For developing Angular Apps we need the support of TypeScript language.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package typescript-mode
    :ensure t
    :defer t
    )
#+END_SRC

** Language: PHP

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package php-mode
    :ensure t
    :defer t
    )
#+END_SRC

** Language: HTML, CSS, JavaScript

Install packages for write web pages.
The web-mode package is good for HTML and SCSS mode.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package web-mode
    :ensure t
    :defer t
    :config

    ;; Configuration
    (setq web-mode-enable-auto-pairing t)
    (setq web-mode-enable-css-colorization t)
    (setq web-mode-enable-block-face t)
    (setq web-mode-enable-part-face t)
    (setq web-mode-enable-heredoc-fontification t)
    (setq web-mode-enable-current-element-highlight t)
    (setq web-mode-enable-current-column-highlight t)
    (setq web-mode-markup-indent-offset 2)

    ;; Colors
    (set-face-attribute 'web-mode-block-face nil :background nil)
    (set-face-attribute 'web-mode-inlay-face nil :background nil)
    (set-face-attribute 'web-mode-current-column-highlight-face nil
                        :foreground near-to-white-color :background nil)
    (set-face-attribute 'web-mode-current-element-highlight-face nil
                        :foreground near-to-white-color
                        :background (face-background 'hl-line)
                        :weight 'extra-bold
                        :underline nil)
    :mode (
           ("\\.html?\\'" . web-mode)
           ("\\.erb\\'" . web-mode)
           ("\\.handlebars\\'" . web-mode)
           ("\\.mustache\\'" . web-mode)
           )
    )
#+END_SRC

For pure JavaScript code js2-mode is a great package.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package js2-mode
    :ensure t
    :defer t
    :mode (
           ("\\.js?\\'" . js2-mode)
           )
    )
#+END_SRC

** Language: JSON

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package json-mode
    :ensure t
    :defer t
    :mode ("\\.json\\'" . json-mode)
    )
#+END_SRC

** Language: YAML

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package yaml-mode
    :ensure t
    :defer t
    :mode (
      ("\\.yaml\\'" . yaml-mode)
      ("\\.yml\\'" . yaml-mode)
    )
    )
#+END_SRC

** Language: CMake

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package cmake-mode
    :ensure t
    :defer t
    )
#+END_SRC

** Language: Kivy

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package kivy-mode
    :ensure t
    :defer t
    :mode ("\\.kv\\'" . kivy-mode)
    )
#+END_SRC

** Language: Ruby On Rails

Integrate with projevtile package.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package projectile-rails
    :ensure t
    :defer t
    :config

    (define-key projectile-rails-mode-map (kbd "C-c r") 'projectile-rails-command-map)

    :hook (ruby-mode . projectile-rails-mode)
    )
#+END_SRC

** Language: Markdown

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package markdown-mode
    :ensure t
    :defer t
    :init
    (setq markdown-command "multimarkdown")

    :commands (markdown-mode gfm-mode)

    :mode (("README\\.md\\'" . gfm-mode)
           ("\\.md\\'" . markdown-mode)
           ("\\.markdown\\'" . markdown-mode))
    )
#+END_SRC

** Language: Nginx

Manage nginx configuration files.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package nginx-mode
    :ensure t
    :defer t
    :mode ("\\.nginx\\'" . nginx-mode)
    )
#+END_SRC

** Language: Rust

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package rust-mode
    :ensure t
    :defer t
    )
#+END_SRC

** Language: Vue

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package vue-mode
    :ensure t
    :defer t
    )
#+END_SRC

** Language: Haml

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package haml-mode
    :ensure t
    :defer t

    )
#+END_SRC

** Language: Docker

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package dockerfile-mode
    :ensure t
    :defer t
    )
#+END_SRC
