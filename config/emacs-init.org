#+AUTHOR: Alessandro Passerini
#+TITLE: Emacs Configuration

* User Interface

Definitions of colors, fonts, icons, windows positions and all other visual stuffs.
All customization are defined inside functions or within "use-package" callbacks.

** Remove unwanted buffers

Remove all unwanted buffers and limit the amounte of messages shown.
Also show an empty scratch when starting.

#+BEGIN_SRC emacs-lisp :tangle yes
  (defun my-manage-buffers()
    "Remove unwanted buffers."

    ;; Empty scratch buffer
    (setq initial-scratch-message nil)

    ;; Scratch buffer without any stuff (simple text)
    (setq initial-major-mode 'text-mode)

    ;; Empty minibuffer message
    (defun display-startup-echo-area-message()
      "Overwrite default startup message."
      (message ""))

    ;; Increase error level in *Warnings* buffer
    ;; (default is :warning). Removes many unwanted warnings.
    (setq warning-minimum-level :error)

    ;; Removes *Completions* from buffer after you've opened a file.
    (add-hook 'minibuffer-exit-hook
	      #'(lambda ()
		  (let ((buffer "*Completions*"))
		    (and (get-buffer buffer)
			 (kill-buffer buffer)))))
    )

  (my-manage-buffers)
#+END_SRC

** Fonts

Set the default font for the editor.
It tries to use Visual Studio Code fonts first ("Consolas" then "Monaco").
If these are not installed it fallbacks to "DejaVu Sans Mono" that is pretty common.
These fonts should be installed manually.

#+BEGIN_SRC emacs-lisp :tangle yes
  (defun my-set-default-font()
    "Set default font"
    (cond

     ((find-font (font-spec :name "Droid Sans Mono"))
      (set-frame-font "Droid Sans Mono 11" nil t)
      )

     ((find-font (font-spec :name "Monospace"))
      (set-frame-font "Monospace 11" nil t)
      )

     ((find-font (font-spec :name "Consolas"))
      (set-frame-font "Consolas 11" nil t)
      )

     ((find-font (font-spec :name "Monaco"))
      (set-frame-font "Monaco 11" nil t)
      )

     ((find-font (font-spec :name "DejaVu Sans Mono"))
      (set-frame-font "DejaVu Sans Mono 11" nil t)
      )
     )
    )

  (my-set-default-font)
#+END_SRC

** Load theme

Load theme as soon as possible setting the base colors for each element.

#+BEGIN_SRC emacs-lisp :tangle yes
  (add-to-list 'custom-theme-load-path "~/.emacs.d/themes/")
  ;;(load-theme 'vscode t)
  (load-theme 'vscode-dark-modern t)
#+END_SRC

** Mode line

Setup a fancy modeline..

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package doom-modeline
    :ensure t
    :init

    ;; How tall the mode-line should be. It's only respected in GUI.
    ;; If the actual char height is larger, it respects the actual height.
    (setq doom-modeline-height 28)

    ;; How wide the mode-line bar should be. It's only respected in GUI.
    (setq doom-modeline-bar-width 1)

    ;; Expand all files and dir from project
    (setq doom-modeline-buffer-file-name-style 'relative-from-project)

    ;; Show buffer name always with the same color
    (setq doom-modeline-highlight-modified-buffer-name nil)

    ;; Show line and column position
    (setq doom-modeline-position-line-format '("%4l:%c"))

    ;; Hide position within buffer
    (setq doom-modeline-percent-position '(""))

    ;; Whether display the buffer encoding.
    (setq doom-modeline-buffer-encoding nil)

    ;; The maximum displayed length of the branch name of version control.
    (setq doom-modeline-vcs-max-length 30)

    ;; Activate modeline everywhere
    (doom-modeline-mode 1)
    )
#+END_SRC

** Initial loading progress bar

#+BEGIN_SRC emacs-lisp :tangle yes
  (defvar my-loading-dots "" "Dots for loading message.")

  (defun my-update-loading-message (&optional base-message)
    "Update loading message with increasing dots.
     BASE-MESSAGE is the default loading message (default: \"Loading\").
     The dots wraps after reaching 50 dots."
    (let ((message (or base-message "Loading")))
      (setq my-loading-dots
        (if (< (length my-loading-dots) 50)
        (concat my-loading-dots ".")
          "")) ;; Resetta dopo 3 puntini
      (message "%s%s" message my-loading-dots))
  )
#+END_SRC

** Cursor style

Set default cursor style.

#+BEGIN_SRC emacs-lisp :tangle yes
  (defun my-setup-cursor()
    "My setup cursor."

    ;; Cursor like a bar
    (setq-default cursor-type '(bar . 3))
    ;; Set cursor color
    (set-cursor-color "white")
    ;; Blink cursor
    (blink-cursor-mode)
    )

  (my-setup-cursor)
  (my-update-loading-message)
#+END_SRC

** Tree

Setup a sidenav tree.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package treemacs
    :ensure t
    :defer t
    :init
    (with-eval-after-load 'winum
      (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
    :config

      (setq treemacs-collapse-dirs                   (if treemacs-python-executable 3 0)
        treemacs-deferred-git-apply-delay        0.5
        treemacs-directory-name-transformer      #'identity
        treemacs-display-in-side-window          t
        treemacs-eldoc-display                   'simple
        treemacs-file-event-delay                2000
        treemacs-file-extension-regex            treemacs-last-period-regex-value
        treemacs-file-follow-delay               0.2
        treemacs-file-name-transformer           #'identity
        treemacs-follow-after-init               t
        treemacs-expand-after-init               t
        treemacs-find-workspace-method           'find-for-file-or-pick-first
        treemacs-git-command-pipe                ""
        treemacs-goto-tag-strategy               'refetch-index
        treemacs-header-scroll-indicators        '(nil . "^^^^^^")
        treemacs-hide-dot-git-directory          t
        treemacs-indentation                     2
        treemacs-indentation-string              " "
        treemacs-is-never-other-window           nil
        treemacs-max-git-entries                 5000
        treemacs-missing-project-action          'ask
        treemacs-move-forward-on-expand          nil
        treemacs-no-png-images                   nil
        treemacs-no-delete-other-windows         t
        treemacs-project-follow-cleanup          nil
        treemacs-persist-file                    (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
        treemacs-position                        'left
        treemacs-read-string-input               'from-child-frame
        treemacs-recenter-distance               0.1
        treemacs-recenter-after-file-follow      nil
        treemacs-recenter-after-tag-follow       nil
        treemacs-recenter-after-project-jump     'always
        treemacs-recenter-after-project-expand   'on-distance
        treemacs-litter-directories              '("/node_modules" "/.venv" "/.cask")
        treemacs-project-follow-into-home        nil
        treemacs-show-cursor                     nil
        treemacs-show-hidden-files               t
        treemacs-silent-filewatch                nil
        treemacs-silent-refresh                  nil
        treemacs-sorting                         'alphabetic-asc
        treemacs-select-when-already-in-treemacs 'move-back
        treemacs-space-between-root-nodes        t
        treemacs-tag-follow-cleanup              t
        treemacs-tag-follow-delay                1.5
        treemacs-text-scale                      nil
        treemacs-user-mode-line-format           nil
        treemacs-user-header-line-format         nil
        treemacs-wide-toggle-width               70
        treemacs-width                           50
        treemacs-width-increment                 1
        treemacs-width-is-initially-locked       t
        treemacs-workspace-switch-cleanup        nil)

      ;; The default width and height of the icons is 22 pixels.
      ;; (treemacs-resize-icons 22)

      ;; Set root folder similar to VSCode theme
      (set-face-attribute 'treemacs-root-face nil
              :weight 'bold
              :height 1.0
              :underline nil
              :inherit 'default
              )

    :bind
    (:map global-map
      ("C-S-e"         . treemacs-select-window)
      ("C-x t 1"       . treemacs-delete-other-windows)
      ("C-x t t"       . treemacs)
      ("C-x t d"       . treemacs-select-directory)
      ("C-x t B"       . treemacs-bookmark)
      ("C-x t C-t"     . treemacs-find-file)
      ("C-x t M-t"     . treemacs-find-tag)
      :map treemacs-mode-map
      ("<escape>"      . treemacs-kill-buffer)
      )
    )
#+END_SRC

** Icons

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package nerd-icons
    :ensure t
    ;; :custom
    ;; The Nerd Font you want to use in GUI
    ;; "Symbols Nerd Font Mono" is the default and is recommended
    ;; but you can use any other Nerd Font if you want
    ;; (nerd-icons-font-family "Symbols Nerd Font Mono")
    :init
      (my-update-loading-message)
    )

  (use-package nerd-icons-completion
    :ensure t
    :defer t
    :after (:lsp)
    :config
    (nerd-icons-completion-mode)
    )

  (use-package treemacs-nerd-icons
    :ensure t
    :defer t
    :after (:treemacs)
    :config
    (treemacs-load-theme "nerd-icons")
    )

  (use-package nerd-icons-dired
     :ensure t
     :defer t
     :hook
     (dired-mode . nerd-icons-dired-mode)
     )
#+END_SRC

** Line numbers

Line numbers are useful in programming mode.
Define the function now. Loading theme triggers this function.

#+BEGIN_SRC emacs-lisp :tangle yes
  (defun my-line-preferences()
    "Setup line numbers."

    ;; Manage line numbers
    (setq display-line-numbers-width 5)
    (add-hook 'prog-mode-hook 'display-line-numbers-mode)
    (add-hook 'json-mode-hook 'display-line-numbers-mode)
    (add-hook 'yaml-mode-hook 'display-line-numbers-mode)

    ;; Show active line (globally)
    (global-hl-line-mode)
    )

  (my-line-preferences)
  (my-update-loading-message)
#+END_SRC

** End-of-line vertical ruler

In programming modes it's useful to have a vertical line that show the right margin.

#+BEGIN_SRC emacs-lisp :tangle yes
  (defun my-display-fill-column()
    "Show a vertical line at the end of the line"

    (setq-default fill-column 80)
    (add-hook 'prog-mode-hook 'display-fill-column-indicator-mode)
    )

  (my-display-fill-column)
  (my-update-loading-message)
#+END_SRC

** Parentesis

#+BEGIN_SRC emacs-lisp :tangle yes
  (defun my-highlight-parentheses ()
    "Hightlight parentesis"
    (font-lock-add-keywords
     nil
     '(("\\([][{}()]\\)"   ;; Regex per parentesi tonde, quadre e graffe
        (1 'font-lock-parenthesis-face)))))

  (defface font-lock-parenthesis-face
    '((t :foreground "#e7c303" :weight bold)) ;; Colore giallo per il tema scuro
    "Face per evidenziare tutte le parentesi.")

  (add-hook 'prog-mode-hook 'my-highlight-parentheses)
  (my-update-loading-message)
#+END_SRC

** Dired...

#+BEGIN_SRC emacs-lisp :tangle yes
  (defun my-dired-settings()
    "Beautify and improve dired view."

    ;; open file in the same window
    (eval-after-load "dired"
      '(progn (define-key dired-mode-map [mouse-2] 'dired-mouse-find-file))
      )
    )

  (my-dired-settings)
  (my-update-loading-message)
#+END_SRC

** Windows position

Force window positioning for a specified function.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package shackle
    :ensure t
    :init
    (my-update-loading-message)
    :config
    (setq shackle-rules '(
                          ("\\`\\*[hH]elm.*?\\*\\'" :regexp t :align 'below :size 0.4)
                          ("\\`\\*bm-bookmarks.*?\\*\\'" :regexp t :align 'below :size 0.3)
                          ("\\`\\*Flymake.*?\\*\\'" :regexp t :align 'below :size 0.3)
                          ("\\`\\*Flycheck.*?\\*\\'" :regexp t :align 'below :size 0.3)
                          ("\\`\\*terminal.*?\\*\\'" :regexp t :align 'below :size 0.3)
                          ))
    (shackle-mode 1)
    )
#+END_SRC

** Kill buffers

Utility for killing buffers other than current buffer.

#+BEGIN_SRC emacs-lisp :tangle yes
  (defun my-kill-other-buffers ()
    "Kill all other buffers."
    (interactive)

    (mapc 'kill-buffer
          (delq (current-buffer)
                (remove-if-not 'buffer-file-name (buffer-list))))
    (message "Killed other buffers")
    )
#+END_SRC

** Keybinding Help Screen (and activate all)

Show help for keybindings.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package which-key
    :ensure t
    :init
    (my-update-loading-message)
    (which-key-setup-side-window-right)
    (which-key-mode)

    :bind (
           ("C-<f4>"   . 'kill-buffer-and-window)
           ("C-w"      . 'kill-buffer-and-window)
           ("S-C-<f4>" . 'my-kill-other-buffers)
           ("S-C-w"    . 'my-kill-other-buffers)
           ("<escape>" . 'keyboard-escape-quit)
           ("C-s"      . 'my-save)
           ("C-M-s"    . 'my-save-all)
           ("C-S-a"    . 'ff-find-other-file)
           ("C-S-x"    . 'list-packages)
           ("C-ò"      . 'term)
           ("C-/"      . 'comment-dwim)
           ("C-S-["    . 'hs-hide-block)
           ("C-S-]"    . 'hs-show-block)
           ("C-S-m"    . 'flymake-show-buffer-diagnostics)
           ("<f8>"     . 'flymake-goto-next-error)
           ("S-<f8>"   . 'flymake-goto-previous-error)
           )
    )
#+END_SRC

* Base setup
** Separate customization file

The customize command let's Emacs to configure each aspects of the editor.
In order to keep clean configuration all customizations are written
in a separate file.

#+BEGIN_SRC emacs-lisp :tangle yes
  (defun my-custom-file()
    "Use a separate custom file"
    (setq custom-file "~/.emacs.d/custom.el")
    (cond
     ((file-exists-p custom-file) (load custom-file t t))
     )
    )

  (my-custom-file)
  (my-update-loading-message)
#+END_SRC

** Path for executable files

The environment variables in Emacs looks the same as in user's shell.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package exec-path-from-shell
    ;; (Works only on Linux/Mac)
    :if (memq window-system '(mac ns x))
    :ensure t
    :init
    (my-update-loading-message)
    :config
    ;;(setq exec-path-from-shell-arguments nil)
    ;;(setq exec-path-from-shell-check-startup-files nil)
    (exec-path-from-shell-initialize)
    )
#+END_SRC

** Customize saving buffers

Save buffers needs to be performed without confirmation.
Also we want to refresh magit buffers automatically.

#+BEGIN_SRC emacs-lisp :tangle yes
  (defun my-save()
    "Save current buffer without confirmation."
    (interactive)

    (save-buffer t)
    (if (fboundp 'magit-refresh-all)
      (magit-refresh-all))
    )
#+END_SRC

Also we want a keystroke to save all buffers.
Both these setup will be performed later.

#+BEGIN_SRC emacs-lisp :tangle yes
  (defun my-save-all()
    "Save all buffers without confirmation and refresh magit."
    (interactive)

    (save-some-buffers t)
    (if (fboundp 'magit-refresh-all)
      (magit-refresh-all))
    (message "Saved all files.")
    )
#+END_SRC

** Auto reload on change

Some CLI tools (beautifiers, linters, ..) can change the files on disk.
This preference ensures Emacs reload buffer automatically.

#+BEGIN_SRC emacs-lisp :tangle yes
  (defun my-auto-revert()
    "Reload when file has changed"

    (global-auto-revert-mode t)
    )

  (my-auto-revert)
  (my-update-loading-message)
#+END_SRC

** Backup preferences

#+BEGIN_SRC emacs-lisp :tangle yes
  (defun my-backup-preferences()
    "Apply my backup preference."

    ;; Temporary .#files interferes with Angular
    (setq create-lockfiles nil)

    ;; Backup files copying them into a subdirectory
    (setq backup-directory-alist `(("." . "~/.saves")))

    (setq make-backup-files t               ; backup of a file the first time it is saved.
          backup-by-copying t               ; don't clobber symlinks
          version-control t                 ; version numbers for backup files
          delete-old-versions t             ; delete excess backup files silently
          delete-by-moving-to-trash t
          kept-old-versions 6               ; oldest versions to keep when a new numbered backup is made (default: 2)
          kept-new-versions 9               ; newest versions to keep when a new numbered backup is made (default: 2)
          auto-save-default t               ; auto-save every buffer that visits a file
          auto-save-timeout 20              ; number of seconds idle time before auto-save (default: 30)
          auto-save-interval 200            ; number of keystrokes between auto-saves (default: 300)
          )

    ;; Save without messages
    (setq-default save-silently t)

    ;; Delete trailing whitespaces before saving
    (add-hook 'before-save-hook 'delete-trailing-whitespace)

    ;; No more typing the whole yes or no. Just y or n will do.
    (fset 'yes-or-no-p 'y-or-n-p)
    )

  (my-backup-preferences)
  (my-update-loading-message)
#+END_SRC

* Editing
** Indent preferences (generic)

First we define a set of default values to be used in every buffer.
I prefer to avoid tabs for indentation.

#+BEGIN_SRC emacs-lisp :tangle yes
  (defun my-indent-preferences()
    "Setup default indentations."

    ;; Do not use tabs by default
    (setq-default indent-tabs-mode nil)

    ;; Use 4 spaces by default
    (setq-default tab-width 4)
    (setq-default ruby-indent-level 2)
    (setq-default css-indent-offset 4)
    )

  (my-indent-preferences)
  (my-update-loading-message)
#+END_SRC

** Indent preferences (per-project)

Add support for EditorConfig files.
These files apply indentations and editor preferences for each file (per project).
For more information please read: https://editorconfig.org/

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package editorconfig
    :ensure t
    :init
    (my-update-loading-message)
    :config
    (editorconfig-mode 1)
    )
#+END_SRC

** Indent Guide

Show indent guides.

#+BEGIN_SRC emacs-lisp :tangle yes
  (defun my-bitmap-line (width height crep zrep)
    "Defines a solid guide line, one pixels wide."
    (let* ((left (/ (- width 2) 2))
           (right (- width left 1))
           (row (append (make-list left zrep) (make-list 1 crep) (make-list right zrep)))
           rows)
      (dotimes (i height rows)
        (setq rows (cons row rows)))))

  (use-package highlight-indent-guides
    :ensure t
    :defer t
    :config
    ;; Highlight the first level of indentation
    (setq highlight-indent-guides-responsive 'top)
    ;; Use a bitmap line ..
    (setq highlight-indent-guides-method 'bitmap)
    ;; .. customized with a one pixel with
    (setq highlight-indent-guides-bitmap-function 'my-bitmap-line)
    ;; Use manual defined colors
    (setq highlight-indent-guides-auto-enabled nil)

    ;; Activate indent guides for all programming languages
    :hook (prog-mode . highlight-indent-guides-mode)
    )
#+END_SRC

** Cut-Paste like Windows

Setup Cut-Paste like most Windows and MAC editors.

#+BEGIN_SRC emacs-lisp :tangle yes
  (defun my-cut-paste-preferences()
    "Setup cut/paste preferences."

    ;; Cut-Paste like Windows
    (cua-mode t)

    ;; Disable selection after copy.
    ;; Standard Windows behaviour is to keep region instead.
    (setq cua-keep-region-after-copy nil)

    ;; Typed text deletes selected text
    (delete-selection-mode t)

    ;; No region when it is not highlighted
    (transient-mark-mode 1)
    )

  (my-cut-paste-preferences)
  (my-update-loading-message)
#+END_SRC

** Search and Replace

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package visual-regexp
    :ensure t
    :defer t
    :init
    (setq vr/auto-show-help t)

    :config
    (set-face-attribute 'vr/match-0 nil
       :foreground 'unspecified
       :background "#623315"
       :weight 'extra-bold
       :box '(:line-width (-1 . -1)
              :color "#767676"
              :style nil)
      )
    (set-face-attribute 'vr/match-1 nil
      :foreground 'unspecified
      :background "#623315"
      :weight 'extra-bold
      :box '(:line-width (-1 . -1)
             :color "#767676"
             :style nil)
      )
    :bind (
           ("S-C-r" . vr/mc-mark)
           ("C-r" . vr/replace)
           )
    )
#+END_SRC

** Word wrap

#+BEGIN_SRC emacs-lisp :tangle yes
  (defun my-word-wrap()
    "Manage word wrap"

    (setq-default truncate-lines t)
    )

  (my-word-wrap)
  (my-update-loading-message)
#+END_SRC

** Move line

Almost all IDE has keystrokes to move and duplicate lines.
The package move-dup implements the same feature in Emacs.
This package interferes with org-mode so we

#+BEGIN_SRC emacs-lisp :tangle yes
  (defun my-activate-move-dup()
    "Choose when activate mode-dup"
    (interactive)

    (if (eq major-mode 'org-mode)
        (message "move-dup disabled in org-mode")
        (move-dup-mode)
        )
    )

  (use-package move-dup
    :ensure t
    :defer t
    :hook (
           (after-change-major-mode  . my-activate-move-dup)
           )
    :bind (
           ("M-<up>" . md-move-lines-up)
           ("M-<down>" . md-move-lines-down)
           ("M-C-<up>" . md-duplicate-up)
           ("M-C-<down>" . md-duplicate-down)
           )
    )
#+END_SRC

** Find other files

The *ff-find-other-file* function is used to search for file related to the current buffer.
An example is switching between files such as C/C++ header files.

#+BEGIN_SRC emacs-lisp :tangle yes
  (defun my-other-file-settings()
    "Redefine search for other files"
    (interactive)

    (defvar my-other-file-alist
      '(
        ("\\.component.html\\'" (".component.ts" ".component.spec.ts" ".component.scss"))
        ("\\.component.ts\\'" (".component.spec.ts" ".component.scss" ".component.html"))
        ("\\.component.spec.ts\\'" (".component.scss" ".component.html" ".component.ts"))
        ("\\.component.scss\\'" (".component.html" ".component.ts" ".component.spec.ts"))

        ("\\.service.ts\\'" (".service.spec.ts"))
        ("\\.service.spec.ts\\'" (".service.ts"))

        ("\\.guard.ts\\'" (".guard.spec.ts"))
        ("\\.guard.spec.ts\\'" (".guard.ts"))
        ))

    (setq-default ff-other-file-alist 'my-other-file-alist)
    )
#+END_SRC

** Multiple Cursors

Add the ability to manage multiple cursors.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package multiple-cursors
    :ensure t
    :init
    (my-update-loading-message)
    :config

    ;; Needed to configure this package
    (require 'multiple-cursors)

    ;; Always run commands
    (setq-default mc/always-run-for-all t)
    ;; Always run commands
    (setq-default mc/always-repeat-command t)
    ;; Safety ceil
    (setq-default mc/max-cursors 30)

    (set-face-attribute 'mc/cursor-bar-face nil :background "white" :height 1)

    ;; NO NOT USE :bind here
    ;; It doesn't seems working well with multiple cursor

    ;; Exit using escape
    (define-key mc/keymap (kbd "<escape>") 'mc/keyboard-quit)

    ;; will make <return> insert a newline; multiple-cursors-mode can still
    ;; be disabled with C-g / ESC
    (define-key mc/keymap (kbd "<return>") nil)

    ;; Basic selection
    (global-set-key (kbd "C-D") 'mc/mark-next-like-this-word)
    (global-set-key (kbd "M-S-<up>") 'mc/mark-previous-lines)
    (global-set-key (kbd "M-S-<down>") 'mc/mark-next-lines)
    )
#+END_SRC

** Compile Preferences

#+BEGIN_SRC emacs-lisp :tangle yes
  (defun my-compiling-preferences()
    "Configure compiler."

    ;; Auto-save before compiling
    (setq compilation-ask-about-save nil)

    ;; Never prompt to kill a compilation session.
    (setq-default compilation-always-kill t)

    ;; Always scroll to the bottom.
    (setq-default compilation-scroll-output t)

    ;; Show ANSI color
    (add-hook 'compilation-filter-hook 'ansi-color-compilation-filter)
    )

  (my-compiling-preferences)
  (my-update-loading-message)
#+END_SRC

* Completion
** Install Helm

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package helm
    :ensure t
    :defer t
    :config

    (setq helm-split-window-in-side-p           t   ;; Open helm buffer inside current window, not occupy whole other window
          helm-move-to-line-cycle-in-source     t   ;; move to end or beginning of source when reaching top or bottom of source.
          helm-ff-search-library-in-sexp        t   ;; search for library in `require' and `declare-function' sexp.
          helm-scroll-amount                    10  ;; scroll 8 lines other window using M-<next>/M-<prior>
          helm-ff-file-name-history-use-recentf t
          helm-display-header-line              nil ;; Hide header line
          helm-echo-input-in-header-line        nil ;; Do not echo in header line

          helm-autoresize-max-height            0   ;;
          helm-autoresize-min-height            20  ;;
          )

    (helm-autoresize-mode 1)

    ;; Colors
    ;; Set "match" color for searches.
    (set-face-attribute 'helm-match nil
                        :foreground "#2aaaff" :background 'unspecified :weight 'extra-bold)

    :bind (
           ("M-x"             . helm-M-x)
           ("C-S-p"           . helm-M-x)
           ("<f1>"            . helm-M-x)
           ("C-o"             . helm-find-files)
           ;; Various common ways to switch buffers
           ("C-x b"           . helm-buffers-list)
           ("C-x C-b"         . helm-buffers-list)
           ;; The kill ring is handy
           ("C-S-v"           . helm-show-kill-ring)
           ("C-f"             . helm-occur)
           :map helm-map
           ;; Use tab to narrow selection
           ("<escape>"        . helm-keyboard-quit)
           ("<tab>"           . helm-execute-persistent-action)
           )
    )
#+END_SRC

* Projects Management
** Project list

Projectile package helps discover and remember projects.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package projectile
    :ensure t
    :defer t
    :init

    (setq projectile-completion-system 'helm)

    (put 'projectile-project-configure-cmd 'safe-local-variable #'stringp)
    (put 'projectile-project-compilation-cmd 'safe-local-variable #'stringp)
    (put 'projectile-project-run-cmd 'safe-local-variable #'stringp)
    (put 'projectile-project-test-cmd 'safe-local-variable #'stringp)

    (projectile-mode)

    :bind (
           ;; Project building and testing
           ("C-S-d"   . projectile-compile-project)    ;; VS Code keybinding
           ("<f9>"   . projectile-compile-project)
           ("C-<f9>" . projectile-run-project)
           ("S-<f9>" . projectile-configure-project)
           ("M-<f9>" . projectile-test-project)
           )
       )
#+END_SRC

We want to use helm for selecting and narrowing projects.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package helm-projectile
    :ensure t
    :defer t
    :bind (
           ("C-S-f" . helm-projectile-grep)
           ("S-C-o" . helm-projectile-switch-project)
           ("C-t"   . helm-projectile-find-file)
           ;; Switch all buffers
           ("C-<tab>"         . helm-buffers-list)
           ("C-<iso-lefttab>" . helm-buffers-list)
           ("C-S-<tab>"         . helm-projectile-switch-to-buffer)
           ("C-S-<iso-lefttab>" . helm-projectile-switch-to-buffer)
           :map helm-map
           ;; Use tab to narrow selection
           ("C-<tab>"         . helm-next-line)
           ("C-<iso-lefttab>" . helm-previous-line)
           )

    :config
    (helm-projectile-on)
    )
#+END_SRC

Let projectile integrate with Treemacs.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package treemacs-projectile
    :ensure t
    :defer t
    )
#+END_SRC

** Git support

Magit is a complete User Interface for Git.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package magit
    :ensure t
    :defer t
    :bind (
           ("C-S-g" . magit-status)
           ("<f6>" . magit-log-all)
           :map magit-mode-map
           ("<escape>" . quit-window)
           )
    )
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package git-gutter
    :ensure t
    :defer t
    :config

    ;; Set git gutter signs
    (setq git-gutter:added-sign "▐")
    (setq git-gutter:modified-sign "▐")
    (setq git-gutter:deleted-sign "▐")

    ;; With this char the whole column is always present in prog-mode
    (setq git-gutter:unchanged-sign " ")

    ;; Disable background for unchanged text
    (set-face-attribute 'git-gutter:unchanged nil :background 'unspecified)

    :hook (prog-mode . git-gutter-mode)

    :bind (
           ("S-M-<f5>" . git-gutter:previous-hunk)
           ("M-<f5>" . git-gutter:next-hunk)
           )
    )
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package git-timemachine
    :ensure t
    :defer t
    )
#+END_SRC

* Language Support
** LSP

Language Service Protocol allows any editor to acquire IDE-like features
like code completion, find implementation, find references, and so on.
You still need to install manually all the related servers.
There is a complete guide for this behaviour here: https://emacs-lsp.github.io/lsp-mode/.

All the LSP fine tuning are grouped in the following functions.

#+BEGIN_SRC emacs-lisp :tangle yes
  (defun my-lsp-performance-settings()
    "Fine tune LSP for maximum performance."
    (interactive)

    ;; Performance improvements
    (setq lsp-use-plists t)

    ;; I still prefer flymake: it's simple, fast and integrated in core Emacs
    (setq lsp-prefer-flymake t)
    ;; Don't watch the file in the workspace
    (setq lsp-enable-file-watchers nil)
    ;; Set warning only if the file to watch are bigger than 100000
    (setq lsp-file-watch-threshold 100000)
    ;; Read process output up to 5 MByte.
    (setq read-process-output-max 5242880)
    ;;
    (setq gc-cons-threshold 100000000)
    ;; Set a not too small idle for autocompletion
    (setq lsp-idle-delay 0.250)
    ;; Disable lsp log.
    ;; If set to true can cause a performance hit.
    ;; Enable it only for debugging.
    (setq lsp-log-io nil)

    ;; Disable automatic server installation suggestions.
    (setq lsp-enable-suggest-server-download nil)

    ;; Disable "Restart LSP Server" requests
    (setq lsp-restart 'ignore)

    ;; Ignore some folders
    (setq lsp-file-watch-ignored
      (append lsp-file-watch-ignored
              '("[/\\\\]\\.angular$"
                "[/\\\\]\\.cache$"
                "[/\\\\]\\build$"
                "[/\\\\]\\dist$")))

    )
#+END_SRC

Enable only needed UI.

#+BEGIN_SRC emacs-lisp :tangle yes
  (defun my-lsp-ui-settings()
    "Fine tune LSP user interface features."
    (interactive)

    ;; Symbol highlighting
    (setq lsp-enable-symbol-highlighting t)

    ;; Shows a hover dialog with function documentation
    (setq lsp-ui-doc-enable t)             ;; enable documentation
    (setq lsp-ui-doc-show-with-cursor t)   ;; enable cursor hover (keep mouse hover)
    (setq lsp-ui-doc-show-with-mouse t)    ;; enable mouse hover (keep cursor hover)
    (setq lsp-ui-doc-use-webkit t)         ;; display documentation using a webkit

    ;; Try to remove annoying ElDoc in minibuffer
    (setq lsp-eldoc-render-all nil)        ;; disable render of docs in minibuffer
    (setq lsp-eldoc-enable-hover nil)
    (setq lsp-signature-render-documentation nil)
    (setq lsp-signature-auto-activate nil)

    ;; Lenses are reference above a method or a variable
    (setq lsp-lens-enable nil)

    ;; The headerline shows a breadcrumb over the code buffer
    ;; I prefer to disable it
    (setq lsp-headerline-breadcrumb-enable nil)

    ;; Sideline code actions
    (setq lsp-ui-sideline-enable t)              ;; disable whole sideline
    (setq lsp-ui-sideline-show-code-actions nil) ;; hide code actions
    (setq lsp-ui-sideline-show-hover nil)        ;; hide only hover symbols
    (setq lsp-ui-sideline-show-symbol t)         ;; show errors
    (setq lsp-ui-sideline-show-diagnostics t)    ;; show errors

    ;; Modeline code actions
    (setq lsp-modeline-code-actions-enable nil)

    ;; Flycheck (or flymake if no flycheck is present)
    (setq lsp-diagnostics-provider :flymake)

    ;; Eldoc shows information about methods in the modeline
    (setq lsp-eldoc-enable-hover t)

    ;; Modeline diagnostics statistics
    ;; shows error information in the modeline
    (setq lsp-modeline-diagnostics-enable nil)

    ;; Completion (company-mode)
    (setq lsp-completion-provider :capf)   ;; It can be disabled with :none
    (setq lsp-completion-show-detail t)    ;; Show item details
    (setq lsp-completion-show-kind t)      ;; show item kind

    ;; Headerline icon enable
    (setq lsp-headerline-breadcrumb-icons-enable nil)

    ;; Colors
    (set-face-attribute 'highlight nil :background "#093d5b" :underline nil)
    (set-face-attribute 'lsp-face-highlight-read nil :underline nil)
    (set-face-attribute 'lsp-face-highlight-textual nil :underline nil)
    (set-face-attribute 'lsp-face-highlight-write nil :underline nil)


    (set-face-attribute 'lsp-ui-peek-selection nil :background "#093d5b")

      (set-face-attribute 'lsp-ui-peek-header nil
        :foreground "white"
        :background "#181818"
        :box '(:line-width (1 . 1)
               :color "#212121"
               :style nil)
        )
  )
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package lsp-mode
    :ensure t
    :defer t
    :commands lsp
    :init

    ;; Set prefix for LSP commands
    (setq lsp-keymap-prefix "C-l")

    :config

    (my-lsp-performance-settings)

    :bind (
           ("<f2>"      . lsp-rename)
           )

    :hook (
           ;; Integrate with which-key
           (lsp-mode . lsp-enable-which-key-integration)
           ;; Activate folding when activate LSP
           (lsp-mode . hs-minor-mode)
           ;; Enable languages
           (js2-mode . lsp)
           (c++-mode . lsp)
           (ruby-mode . lsp)
           (python-mode . lsp)
           (web-mode . lsp)
           (typescript-mode . lsp)
           (rust-mode . lsp)
           (go-mode . lsp)
           (json-mode . lsp)
           (sh-mode . lsp)
           (dockerfile-mode . lsp)
           (php-mode . lsp)
           (scss-mode . lsp)
           )
    )
#+END_SRC

Add lsp-ui package for better user interface.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package lsp-ui
    :ensure t
    :defer t
    :commands lsp-ui-mode

    :init

    ;; Ctrl-j do not play well with lsp-ui
    (global-unset-key (kbd "C-j"))

    :config

    (my-lsp-ui-settings)

    :hook (lsp-mode . lsp-ui-mode)

    :bind (
           ("C-j"       . lsp-ui-imenu)
           ("S-<f12>"   . lsp-ui-peek-find-references)
           ("M-<f12>"   . lsp-ui-peek-find-definitions)
           )
    )
#+END_SRC

Use a fancy box for completion selection.


#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package company
    :ensure t
    :defer t
    ;;     :init
    ;;    (global-company-mode)

    :init
    (setq company-backends '(company-capf))

    :bind (
           ("C-SPC" . company-complete)
           :map company-mode-map
           ("<escape>" . company-abort)
           )
    )

  (use-package company-box
    :ensure t
    :defer t

    :config

    (setq company-box-enable-icon t)

    :hook (company-mode . company-box-mode)
    )
#+END_SRC

Integrate with treemacs package.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package lsp-treemacs
    :ensure t
    :defer t
    :commands lsp-treemacs-error-list
   )
#+END_SRC

** Language: Angular

For developing Angular Apps we need the support of TypeScript language.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package typescript-mode
    :ensure t
    :defer t
    )
#+END_SRC

** Language: PHP

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package php-mode
    :ensure t
    :defer t
    )
#+END_SRC

** Language: HTML, CSS, JavaScript

Install packages for write web pages.
The web-mode package is good for HTML and SCSS mode.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package web-mode
    :ensure t
    :defer t
    :config

    ;; Configuration
    (setq web-mode-enable-auto-pairing t)
    (setq web-mode-enable-css-colorization t)
    (setq web-mode-enable-block-face t)
    (setq web-mode-enable-part-face t)
    (setq web-mode-enable-heredoc-fontification t)
    (setq web-mode-enable-current-element-highlight t)
    (setq web-mode-enable-current-column-highlight t)
    (setq web-mode-markup-indent-offset 2)

    ;; Colors

    ;; Use the same background of the rest of the HTML
    (set-face-attribute 'web-mode-block-face nil :background 'unspecified)

    (set-face-attribute 'web-mode-current-element-highlight-face nil
                        :foreground 'unspecified
                        :background "#474747")

    (set-face-attribute 'web-mode-current-column-highlight-face nil
                        :foreground 'unspecified
                        :background "#474747")

    :mode (
           ("\\.html?\\'" . web-mode)
           ("\\.erb\\'" . web-mode)
           ("\\.handlebars\\'" . web-mode)
           ("\\.mustache\\'" . web-mode)
           )
    )
#+END_SRC

For pure JavaScript code js2-mode is a great package.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package js2-mode
    :ensure t
    :defer t
    :mode (
           ("\\.js?\\'" . js2-mode)
           )
    )
#+END_SRC

** Language: JSON

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package json-mode
    :ensure t
    :defer t
    :mode (
           ("\\.json\\'" . json-mode)
           )
    )
#+END_SRC

** Language: YAML

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package yaml-mode
    :ensure t
    :defer t
    :mode (
      ("\\.yaml\\'" . yaml-mode)
      ("\\.yml\\'" . yaml-mode)
    )
    )
#+END_SRC

** Language: CMake

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package cmake-mode
    :ensure t
    :defer t
    )
#+END_SRC

** Language: Kivy

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package kivy-mode
    :ensure t
    :defer t
    :mode ("\\.kv\\'" . kivy-mode)
    )
#+END_SRC

** Language: Ruby On Rails

Integrate with projectile package.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package projectile-rails
    :ensure t
    :defer t
    :config

    (define-key projectile-rails-mode-map (kbd "C-c r") 'projectile-rails-command-map)

    :hook (ruby-mode . projectile-rails-mode)
    )
#+END_SRC

** Language: Markdown

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package markdown-mode
    :ensure t
    :defer t
    :init
    (setq markdown-command "multimarkdown")

    :commands (markdown-mode gfm-mode)

    :mode (("README\\.md\\'" . gfm-mode)
           ("\\.md\\'" . markdown-mode)
           ("\\.markdown\\'" . markdown-mode))
    )
#+END_SRC

** Language: Nginx

Manage nginx configuration files.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package nginx-mode
    :ensure t
    :defer t
    :mode ("\\.nginx\\'" . nginx-mode)
    )
#+END_SRC

** Language: Rust

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package rust-mode
    :ensure t
    :defer t
    :mode ("\\.rs\\'" . rust-mode)
    )
#+END_SRC

** Language: Go

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package go-mode
    :ensure t
    :defer t
    )
#+END_SRC

** Language: Vue

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package vue-mode
    :ensure t
    :defer t
    )
#+END_SRC

** Language: Haml

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package haml-mode
    :ensure t
    :defer t
    )
#+END_SRC

** Language: Docker

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package dockerfile-mode
    :ensure t
    :defer t
    )
#+END_SRC

** Language: Groovy

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package groovy-mode
    :ensure t
    :defer t
    )
#+END_SRC

** Language: PHP

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package php-mode
    :ensure t
    :defer t
    )
#+END_SRC

** Language: Git

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package git-modes
    :ensure t
    :defer t
    )
#+END_SRC

** Language: Git

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package systemd
    :ensure t
    :defer t
    :mode ("\\.service\\'" "\\.timer\\'" "\\.target\\'" "\\.socket\\'"
           "\\.mount\\'" "\\.automount\\'" "\\.swap\\'" "\\.path\\'"
           "\\.slice\\'" "\\.scope\\'")
   ;; :config
   ;; (add-hook 'systemd-mode-hook #'turn-on-font-lock)
    )
#+END_SRC

* Misc tools
** Impatient Mode

The package "impatient mode" provides a tool for edit HTML page on the fly.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package impatient-mode
    :ensure t
    :defer t
    )
#+END_SRC
