#+AUTHOR: Alessandro Passerini
#+TITLE: Emacs Configuration

* Package Management
** Setup repositories and use-package

Setup repository.
If you want to use only stable packages uncomment melpa-stable repository below.
Beware that some packages may not exists or not work as expected.

#+BEGIN_SRC emacs-lisp :tangle yes
  (defvar repo-gnu '("gnu" . "https://elpa.gnu.org/packages/"))
  (defvar repo-melpa '("melpa" . "https://melpa.org/packages/"))
  ;; (defvar repo-melpa-stable '("melpa-stable" . "https://stable.melpa.org/packages/"))
  (defvar repo-org-elpa '("org" . "http://orgmode.org/elpa/"))

  (setq package-archives nil)
  (add-to-list 'package-archives repo-gnu t)
  (add-to-list 'package-archives repo-melpa t)
  ;; (add-to-list 'package-archives repo-melpa-stable t)
  (add-to-list 'package-archives repo-org-elpa t)
#+END_SRC

** Install use-package

Now we can tell Emacs to install use-package if it's not present.

#+BEGIN_SRC emacs-lisp :tangle yes
  ;; Downloads new packages in case of a fresh install
  ;;(package-initialize)

  ;; Install use-package package if not present
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (eval-when-compile
    (require 'use-package))
#+END_SRC

** Configure environment variables

The environment variables in Emacs looks the same as in user's shell.

#+BEGIN_SRC emacs-lisp :tangle yes
  ;; (Works only on Linux/Mac)
  (use-package exec-path-from-shell
    :if (memq window-system '(mac ns x))
    :ensure t
    :config
    (setq exec-path-from-shell-check-startup-files nil)
      (exec-path-from-shell-initialize)
    )
#+END_SRC

** Separate customization file

The customize command let's Emacs to configure each aspects of the editor.
In order to keep clean configuration all customizations are written
in a separate file.

#+BEGIN_SRC emacs-lisp :tangle yes
;; Use a separate custom file
(setq custom-file "~/.emacs.d/custom.el")
(cond
 ((file-exists-p custom-file) (load custom-file t t))
 )
#+END_SRC

* User Interface

Please note that we are first defining functions.
We'll activate everything when loading theme.

** Disable unwanted UI stuffs

Scollbars, menu bars, splash screen are distracting and occupies space.
Remove all unwanted features.
Please note that we only define a function.
It'll be called later when the theme is loaded.

#+BEGIN_SRC emacs-lisp :tangle yes
  (defun my-remove-annoying-ui-features()
    "Remove unwanted UI stuffs."
    (interactive)

    ;; No more default Emacs splash screen
    (setq inhibit-splash-screen t)

    ;; Empty scratch buffer
    (setq initial-scratch-message nil)

    ;; Scratch buffer without any stuff (simple text)
    (setq initial-major-mode 'text-mode)

    ;; Empty minibuffer message
    (defun display-startup-echo-area-message()
      "Overwrite default startup message."
      (message ""))

    ;; Disable toolbar on top
    (tool-bar-mode -1)

    ;; Disable menu bar on top
    (menu-bar-mode -1)

    ;; No more scrollbars
    (scroll-bar-mode -1)

    ;; Removes *Completions* from buffer after you've opened a file.
    (add-hook 'minibuffer-exit-hook
      '(lambda ()
         (let ((buffer "*Completions*"))
           (and (get-buffer buffer)
               (kill-buffer buffer)))))
  )
#+END_SRC

** Theme (and activate stuffs)

The main theme is inspired to Atom One theme.

#+BEGIN_SRC emacs-lisp :tangle yes
    (use-package doom-themes
      :ensure t
      :init

      (my-remove-annoying-ui-features)

      :config

      ;; Load default theme
      (load-theme 'doom-oceanic-next t)

      ;; Show current line
      (global-hl-line-mode)

      ;; Toggle full screen automatically
      ;;(run-with-idle-timer 0.2 nil 'toggle-frame-fullscreen)
  ;;    (toggle-frame-fullscreen)

      (add-hook 'window-setup-hook 'toggle-frame-maximized t)



      )
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package doom-modeline
  :ensure t
  :init (doom-modeline-mode 1)
  )  
#+END_SRC

* Language Support
** LSP

Language Service Protocol allows any editor to acquire IDE-like features
like code completion, find implementation, find references, and so on.

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package lsp-mode
  :ensure t
  :defer t
  :commands lsp
  :config

  (setq lsp-prefer-flymake nil)
  (setq lsp-ui-doc-use-webkit t)
  (setq lsp-enable-file-watchers t)
  ;; Set warning only if the file to watch are bigger than 100000
  (setq lsp-file-watch-threshold 100000)

  (setq read-process-output-max (* 1024 1024)) ;; 1mb
  (setq gc-cons-threshold 100000000)
  ;; (setq lsp-idle-delay 0.500)

  :hook (
    (c++-mode . lsp)
    (ruby-mode . lsp)
    (python-mode . lsp)
    (web-mode . lsp)
    (rust-mode . lsp)
    (json-mode . lsp)
    (typescript-mode . lsp)
    )
  )
#+END_SRC

Add lsp-ui package for better user interface.

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package lsp-ui
  :ensure t
  :defer t
  :after (lsp-mode)
  :commands lsp-ui-mode
  :config
    (setq lsp-ui-doc-use-webkit t)

  :hook (lsp-mode . lsp-ui-mode)
  )
#+END_SRC



** Language: Angular

For developing Angular Apps we need the support of TypeScript language.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package typescript-mode
    :ensure t
    :defer t
    )
#+END_SRC
